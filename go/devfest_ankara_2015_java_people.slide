Building REST API with GoLang
14 Nov 2015

Burak AYDIN
4PPS
burak@4pps.co
@burakaydn

* Why Go

- Micro services hype
- Easy deployment
- Performance

.link http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/

* Comparing Go and Java

* Commons

- Static Types
- Garbage Collection
- Variables are always initialized (zero/nil/false)
- Methods
- Interfaces

* Differs

- Go compiles to machine code. 
- Function values, closures
- Strings UTF-8
- Built-in concurreny
- Go has great tools!

* Go Mentality

- Do something very well, but don't do so much.
- No news is good news.
- Perfect?

* Hello

Hello.java

	public class Main {
		public static void main(String[] args) {
			System.out.println("Hello, world!");
		}
	}

Hello.go

	func main() {
		fmt.Println("Hello, Go")
	}

* JSON in Go

.image demo/img/go_tags.png _ 600

* Json in Go

- "encoding/json"
- Unmarshal/Marshal
- Encoder/Decoder

* Json in Go

.play demo/json.go /package main/,

* Webserver

.play demo/http.go /package main/,

* Mux

- ServeMux is an HTTP request multiplexer.

.play demo/mux.go /package main/,

* Needs for REST API

- Routing
- Middleware
- Authentication
- CORS
- Hot code reloading
- Easy db access
- Context sharing
- Logging

* Standard packages

- net/http (routing, middleware, auth, CORS)
- log

* Web Frameworks

- Martini
- Gin
- Revel

* 3rd Party Packages

- negroni (Middleware)
- codegangsta/gin (Hot code reload)
- jmorion/sqlx
- rs/cors
- markbates/goth
- gorilla/pat
- gorilla/context

* Gorilla Toolkit

.link http://gorillatoolkit.org/

* Go tools

.link https://godoc.org/golang.org/x/tools

- go fmt
- go vet
- go present

* Go Mobile

.link https://godoc.org/golang.org/x/mobile